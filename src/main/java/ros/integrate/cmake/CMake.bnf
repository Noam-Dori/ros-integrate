{
    parserClass="ros.integrate.cmake.parser.CMakeParser"
    parserUtilClass="ros.integrate.cmake.parser.impl.CMakeParserUtil"


    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="CMake"
    psiImplClassSuffix="Impl"
    psiPackage="ros.integrate.cmake.psi"
    psiImplPackage="ros.integrate.cmake.psi.impl"

    elementTypeHolderClass="ros.integrate.cmake.psi.CMakeTypes"
    elementTypeClass="ros.integrate.cmake.psi.CMakeElementType"
    tokenTypeClass="ros.integrate.cmake.psi.CMakeTokenType"

    psiImplUtilClass="ros.integrate.cmake.psi.impl.CMakePsiImplUtil"
}

// taken directly from the official CMake documentation
// https://cmake.org/cmake/help/latest/manual/cmake-language.7.html
// with some modifications


// section 1 - source files
cmakeFile         ::=  file_element*
private file_element ::=  function | macro | if_block | while_block | for_block | command | bracket_comment | line_ending | junk
private line_ending  ::=  line_comment? NEXTLINE

// section 1.A block command organization into control flow
function ::= <<namedCommand "function">> in_function* <<namedCommand "endfunction">> {
    implements = "ros.integrate.cmake.psi.CMakeBlock"
}
macro    ::= <<namedCommand "macro">> in_macro* <<namedCommand "endmacro">> {
    implements = "ros.integrate.cmake.psi.CMakeBlock"
}
while_block ::= <<namedCommand "while">> in_while* <<namedCommand "endwhile">> {
    implements = "ros.integrate.cmake.psi.CMakeBlock"
}
for_block ::= <<namedCommand "foreach">> in_for* <<namedCommand "endforeach">> {
    implements = "ros.integrate.cmake.psi.CMakeBlock"
}
if_block ::= <<namedCommand "if">> in_if*
            (<<namedCommand "elseif">> in_if*)*
            (<<namedCommand "else">> in_else*)?
            <<namedCommand "endif">> {
    implements = "ros.integrate.cmake.psi.CMakeBlock"
}

private in_function ::= if_block | while_block | for_block | <<unnamedCommand "endfunction">> | bracket_comment | line_ending
private in_macro ::= if_block | while_block | for_block | <<unnamedCommand "endmacro">> | bracket_comment | line_ending
private in_while ::= if_block | while_block | for_block | <<unnamedCommand "endwhile">> | bracket_comment | line_ending
private in_for ::= if_block | while_block | for_block | <<unnamedCommand "endforeach">> | bracket_comment | line_ending
private in_if ::= if_block | while_block | for_block | <<unnamedCommand "elseif" "else" "endif">> | bracket_comment | line_ending
private in_else ::= if_block | while_block | for_block | <<unnamedCommand "else" "endif">> | bracket_comment | line_ending

// section 2 - command invocations
command  ::=  command_name PAREN_OPEN argument_list PAREN_CLOSE {
    implements = ["ros.integrate.cmake.psi.CMakeOperation" "com.intellij.psi.PsiNameIdentifierOwner"]
    methods = [getArguments getName setName getNameIdentifier getReference]
}
command_name ::= TEXT_ELEMENT

// section 3 - command arguments
junk     ::= argument_element+
argument_list ::= argument_element*
private argument_element ::=  bracket_argument | quoted_argument | unquoted_argument
                                | NEXTLINE | bracket_comment

// section 3.1 - bracket arguments
bracket_argument ::=  BRACKET_OPEN TEXT_ELEMENT* BRACKET_CLOSE {
    implements = "ros.integrate.cmake.psi.CMakeArgument"
    methods = [getArgTextRange getArgText]
}

// section 3.2 - quoted arguments
quoted_argument     ::=  QUOTE quoted_element* QUOTE {
    implements = "ros.integrate.cmake.psi.CMakeArgument"
    methods = [getArgTextRange getArgText]
}
private quoted_element      ::=  TEXT_ELEMENT | ESCAPE_SEQUENCE | CONTINUATION

// section 3.3 - unquoted arguments
unquoted_argument ::=  <<unquotedElement paren_element>> {
    implements = ["ros.integrate.cmake.psi.CMakeArgument" "com.intellij.psi.PsiNamedElement"]
    methods = [getArgTextRange getArgText getName setName getReferences]
}

// section 6 - comments
// section 6.1 - bracket comments
bracket_comment ::=  COMMENT_START bracket_argument

// section 6.2 - line comments
line_comment ::=  COMMENT_START TEXT_ELEMENT

private paren_element ::= PAREN_OPEN argument_list PAREN_CLOSE